Index: 10_interop.mof
===================================================================
RCS file: /cvsroot/sblim/sfcb/10_interop.mof,v
retrieving revision 1.6
diff -u -p -r1.6 10_interop.mof
--- 10_interop.mof	24 Dec 2009 19:40:46 -0000	1.6
+++ 10_interop.mof	27 May 2010 23:33:06 -0000
@@ -65,8 +65,12 @@ class DMY_ElementConformsToProfile : CIM
 {
 };
 
-class SFCB_IndicationSubscription : CIM_IndicationSubscription
+class SFCB_IndicationElement : CIM_ManagedElement
 {
-    uint64 DeliveryFailureTime;
+    [key] uint32 IndicationID;
+    uint32 RetryCount;
+    sint32 LastDelivery;
+    CIM_Indication ref ind;
+    CIM_IndicationSubscription ref sub;
+    CIM_ListenerDestination ref ld;
 };
-
Index: 20_indication.mof
===================================================================
RCS file: /cvsroot/sblim/sfcb/20_indication.mof,v
retrieving revision 1.3
diff -u -p -r1.3 20_indication.mof
--- 20_indication.mof	30 Dec 2009 22:41:29 -0000	1.3
+++ 20_indication.mof	27 May 2010 23:33:06 -0000
@@ -11,10 +11,10 @@ instance of SFCB_IndicationServiceCapabi
 {
   InstanceID = "CIM:SFCB_ISC";
   FilterCreationEnabledIsSettable           = FALSE;
-  DeliveryRetryAttemptsIsSettable           = FALSE;
-  DeliveryRetryIntervalIsSettable           = FALSE;
-  SubscriptionRemovalActionIsSettable       = FALSE;
-  SubscriptionRemovalTimeIntervalIsSettable = FALSE;
+  DeliveryRetryAttemptsIsSettable           = TRUE;
+  DeliveryRetryIntervalIsSettable           = TRUE;
+  SubscriptionRemovalActionIsSettable       = TRUE;
+  SubscriptionRemovalTimeIntervalIsSettable = TRUE;
   MaxListenerDestinations                   = 100;
   MaxActiveSubscriptions                    = 100;
   SubscriptionsPersisted                    = TRUE;
@@ -25,7 +25,7 @@ instance of SFCB_RegisteredProfile
   InstanceID = "CIM:SFCB_IP";
   RegisteredOrganization = 2;
   RegisteredName = "Indications";
-  RegisteredVersion = "1.0.0";
+  RegisteredVersion = "1.1.0";
   AdvertiseTypes = 3;
 };
 
Index: default.reg.in
===================================================================
RCS file: /cvsroot/sblim/sfcb/default.reg.in,v
retrieving revision 1.10
diff -u -p -r1.10 default.reg.in
--- default.reg.in	30 Dec 2009 22:41:29 -0000	1.10
+++ default.reg.in	27 May 2010 23:33:06 -0000
@@ -52,12 +52,6 @@
 @LOAD_INDICATION_PROVIDER@   type: instance method
 @LOAD_INDICATION_PROVIDER@   namespace: root/interop
 #
-@LOAD_INDICATION_PROVIDER@[SFCB_IndicationSubscription]
-@LOAD_INDICATION_PROVIDER@   provider: InteropProvider
-@LOAD_INDICATION_PROVIDER@   location: sfcInteropProvider
-@LOAD_INDICATION_PROVIDER@   type: instance method
-@LOAD_INDICATION_PROVIDER@   namespace: root/interop
-#
 @LOAD_INDICATION_PROVIDER@[CIM_IndicationFilter]
 @LOAD_INDICATION_PROVIDER@   provider: InteropProvider
 @LOAD_INDICATION_PROVIDER@   location: sfcInteropProvider
@@ -131,3 +125,11 @@
    type: instance association
    namespace: root/interop
 #
+[SFCB_IndicationElement]
+   provider: InternalProvider
+   location: sfcInternalProvider
+   type: instance method association
+   unload: never
+   namespace: root/interop
+#
+
Index: indCIMXMLHandler.c
===================================================================
RCS file: /cvsroot/sblim/sfcb/indCIMXMLHandler.c,v
retrieving revision 1.24
diff -u -p -r1.24 indCIMXMLHandler.c
--- indCIMXMLHandler.c	21 Jan 2010 21:50:37 -0000	1.24
+++ indCIMXMLHandler.c	27 May 2010 23:33:06 -0000
@@ -236,6 +236,7 @@ CMPIStatus IndCIMXMLHandlerCreateInstanc
    CMPIString* dest = CMGetProperty(ciLocal, "destination", &st).value.string;
    if (dest == NULL || CMGetCharPtr(dest) == NULL) {
      setStatus(&st,CMPI_RC_ERR_FAILED,"Destination property not found; is required");
+     CMRelease(ciLocal);
      _SFCB_RETURN(st);              
    }
    else { /* if no scheme is given, assume http (as req. for param by mof) */
@@ -257,6 +258,7 @@ CMPIStatus IndCIMXMLHandlerCreateInstanc
    }
    else if (persistence.value.uint16 < 1 || persistence.value.uint16 > 3) {
      setStatus(&st,CMPI_RC_ERR_FAILED,"PersistenceType property must be 1, 2, or 3");
+     CMRelease(ciLocal);
      _SFCB_RETURN(st);              
    }
    else {
@@ -373,7 +375,8 @@ CMPIStatus deliverInd(
      setStatus(&st,CMPI_RC_ERR_NOT_FOUND,NULL);
      _SFCB_RETURN(st); 
   }
-  dest=CMGetProperty(hci,"destination",NULL).value.string;
+
+  dest=CMGetProperty(hci,"destination",&st).value.string;
   _SFCB_TRACE(1,("--- destination: %s\n",(char*)dest->hdl));
   ind=CMGetArg(in,"indication",NULL).value.inst;
 
@@ -381,7 +384,6 @@ CMPIStatus deliverInd(
   xs=exportIndicationReq(ind,strId);
   sb=segments2stringBuffer(xs.segments);
   if (exportIndication((char*)dest->hdl,(char*)sb->ft->getCharPtr(sb), &resp, &msg)) {
-     // change rc
      setStatus(&st,CMPI_RC_ERR_FAILED,NULL);
   }
   RespSegment rs = xs.segments[5];
@@ -395,16 +397,20 @@ CMPIStatus deliverInd(
 
 // Retry queue element and control vars
 typedef struct rtelement {
-   CMPIObjectPath * ref;
-   CMPIArgs * in;
-   CMPIInstance * sub;
+   CMPIObjectPath * ref; // LD
+   CMPIObjectPath * sub;  // Subscription
+   CMPIObjectPath * ind;  // indication with key
+   CMPIObjectPath * SFCBIndEle;  // SFCB_indicationelement
    int count;
    time_t lasttry;
+   unsigned int instanceID;
    struct rtelement  *next,*prev;
 } RTElement;
 static RTElement *RQhead,*RQtail;
 static int retryRunning=0;
 static pthread_mutex_t RQlock=PTHREAD_MUTEX_INITIALIZER;
+pthread_t t;
+pthread_attr_t tattr;
 
 /** \brief enqRetry - Add to retry queue
  *
@@ -413,11 +419,10 @@ static pthread_mutex_t RQlock=PTHREAD_MU
  *  Adds the current time as the last retry time.
  */
 
-int enqRetry (RTElement * element)
+int enqRetry (RTElement * element, const CMPIContext * ctx, int repo)
 {
-    struct timeval tv;
-    struct timezone tz;
 
+    _SFCB_ENTER(TRACE_INDPROVIDER, "enqRetry");  
     // Put this one on the retry queue
     if (pthread_mutex_lock(&RQlock)!=0)  {
         //lock failed
@@ -425,25 +430,48 @@ int enqRetry (RTElement * element)
     }
     if (RQhead==NULL) {
         // Queue is empty
+        _SFCB_TRACE(1,("--- Adding indication to new retry queue."));
         RQhead=element;
         RQtail=element;
         RQtail->next=element;
         RQtail->prev=element;
     } else {
+        _SFCB_TRACE(1,("--- Adding indication to retry queue."));
         element->next=RQtail->next;
         element->next->prev=element;
         RQtail->next=element;
         element->prev=RQtail;
         RQtail=element;
     }
-    RQtail->count=0;
-    gettimeofday(&tv, &tz);
-    RQtail->lasttry=tv.tv_sec;
+
+    if (repo==1) {
+        // If this needs to be persisted in the repo 
+        // (not the initial fill from refillRetryQ)
+        _SFCB_TRACE(1,("--- Creating SFCB_IndicationElement instance."));
+        CMPIObjectPath * op=CMNewObjectPath(_broker,"root/interop","SFCB_IndicationElement",NULL);
+        // Add the indID as the only key
+        CMAddKey(op,"IndicationID",&element->instanceID,CMPI_uint32);
+        // Create the instance
+        //element->SFCBIndEle=op;
+        element->SFCBIndEle=op->ft->clone(op,NULL);
+        CMPIInstance * ci=CMNewInstance(_broker,op,NULL);
+        // Set all the properties
+        CMSetProperty(ci,"IndicationID",&element->instanceID,CMPI_uint32);
+        CMSetProperty(ci,"RetryCount",&(RQtail->count),CMPI_uint32);
+        CMSetProperty(ci,"LastDelivery",&(RQtail->lasttry),CMPI_sint32);
+        CMSetProperty(ci,"ld",&(element->ref),CMPI_ref);
+        CMSetProperty(ci,"ind",&element->ind,CMPI_ref);
+        CMSetProperty(ci,"sub",&element->sub,CMPI_ref);
+        CBCreateInstance(_broker, ctx, op, ci, NULL);
+        CMRelease(op);
+        CMRelease(ci);
+    }
+
     if (pthread_mutex_unlock(&RQlock)!=0)  {
         //lock failed
         return 1;
     }
-    return(0);
+    _SFCB_RETURN(0); 
 }
 
 /** \brief dqRetry - Remove from the retry queue
@@ -452,8 +480,15 @@ int enqRetry (RTElement * element)
  *  Cleans up the queue if empty
  */
 
-int dqRetry (RTElement * cur)
+int dqRetry (CMPIContext * ctx,RTElement * cur)
 {
+    _SFCB_ENTER(TRACE_INDPROVIDER, "dqRetry");  
+    // Delete the instance in the repo
+    CMPIObjectPath * op=CMNewObjectPath(_broker,"root/interop","SFCB_IndicationElement",NULL);
+    CMAddKey(op,"IndicationID",&cur->instanceID,CMPI_uint32);
+    CBDeleteInstance(_broker,ctx,op); 
+    CBDeleteInstance(_broker,ctx,cur->ind); 
+    CMRelease(op);
     // Remove the entry from the queue, closing the hole
     if (cur->next == cur) {
         // queue is empty
@@ -464,13 +499,13 @@ int dqRetry (RTElement * cur)
         cur->prev->next=cur->next;
         cur->next->prev=cur->prev;
         CMRelease(cur->ref);
-        CMRelease(cur->in);
         CMRelease(cur->sub);
         if (cur) free(cur);
     }
-    return(0);
+    _SFCB_RETURN(0); 
 }
 
+
 /** \brief retryExport - Manages retries
  *
  *  Spawned as a thread when a retry queue exists to
@@ -480,10 +515,13 @@ int dqRetry (RTElement * cur)
 
 void * retryExport (void * lctx)
 {
+    _SFCB_ENTER(TRACE_INDPROVIDER, "retryExport");  
+
     CMPIObjectPath *ref;
     CMPIArgs * in;
     CMPIInstance *sub;
     CMPIContext *ctx=(CMPIContext *)lctx;
+    CMPIContext *ctxLocal;
     RTElement *cur,*purge;
     struct timeval tv;
     struct timezone tz;
@@ -493,10 +531,11 @@ void * retryExport (void * lctx)
     CMPIEnumeration *isenm = NULL;
 
     CMPIStatus st = { CMPI_RC_OK, NULL };
+    ctxLocal = prepareUpcall(ctx);
 
     // Get the retry params from IndService
     op=CMNewObjectPath(_broker,"root/interop","CIM_IndicationService",NULL);
-    isenm = _broker->bft->enumerateInstances(_broker, ctx, op, NULL, &st);
+    isenm = _broker->bft->enumerateInstances(_broker, ctx, op, NULL, NULL);
     CMPIData isinst=CMGetNext(isenm,NULL);
     CMPIData mc=CMGetProperty(isinst.value.inst,"DeliveryRetryAttempts",NULL);
     CMPIData ri=CMGetProperty(isinst.value.inst,"DeliveryRetryInterval",NULL);
@@ -508,22 +547,34 @@ void * retryExport (void * lctx)
     ract= ra.value.uint16;      // ... this action is taken
 
     // Now, run the queue
+    sleep(5); //Prevent deadlock on startup when localmode is used.
     pthread_mutex_lock(&RQlock);
     cur=RQhead;
     while (RQhead != NULL ) {
         ref=cur->ref;
-        in=cur->in;
-        sub=cur->sub;
-        CMPIObjectPath *subop=sub->ft->getObjectPath(sub,&st);
+        // Build the CMPIArgs that deliverInd needs
+        CMPIInstance *iinst=internalProviderGetInstance(cur->ind,&st);
+        if (st.rc != 0 ) {
+            mlogf(M_ERROR,M_SHOW,"Failed to retrieve indication instance from repository, rc:%d\n",st.rc);
+            purge=cur;
+            cur=cur->next;
+            dqRetry(ctx,purge);
+            continue;
+        }
+        in=CMNewArgs(_broker,NULL);
+        CMAddArg(in,"indication",&iinst,CMPI_instance);
+        sub=internalProviderGetInstance(cur->sub,&st);
         if (st.rc == CMPI_RC_ERR_NOT_FOUND ) {
             //sub got deleted, purge this indication and move on
+            _SFCB_TRACE(1,("--- Subscription for indication gone, deleting indication."));
             purge=cur;
             cur=cur->next;
-            dqRetry(purge);
+            dqRetry(ctx,purge);
         } else {
             //Still valid, retry
             gettimeofday(&tv, &tz);
             if ((cur->lasttry+rint) > tv.tv_sec) { 
+                _SFCB_TRACE(1,("--- sleeping."));
                 // no retries are ready, release the lock
                 // and sleep for an interval, then relock
                 pthread_mutex_unlock(&RQlock);
@@ -535,19 +586,28 @@ void * retryExport (void * lctx)
                 // either it worked, or we maxed out on retries
                 // If it succeeded, clear the failtime
                 if (st.rc == 0) {
+                    _SFCB_TRACE(1,("--- Indication succeeded."));
                     sfc=0;
                     CMSetProperty(sub,"DeliveryFailureTime",&sfc,CMPI_uint64);
-                    CBModifyInstance(_broker, ctx, subop, sub, NULL);
+                    CBModifyInstance(_broker, ctxLocal, cur->sub, sub, NULL);
                 }
                 // remove from queue in either case
+                _SFCB_TRACE(1,("--- Indication removed."));
                 purge=cur;
                 cur=cur->next;
-                dqRetry(purge);
+                dqRetry(ctx,purge);
             } else {
                 // still failing, leave on queue 
+                _SFCB_TRACE(1,("--- Indication still failing."));
                 cur->count++;
                 gettimeofday(&tv, &tz);
                 cur->lasttry=tv.tv_sec; 
+
+                CMPIInstance * indele=internalProviderGetInstance(cur->SFCBIndEle,&st);
+                CMSetProperty(indele,"LastDelivery",&cur->lasttry,CMPI_sint32);
+                CMSetProperty(indele,"RetryCount",&cur->count,CMPI_uint32);
+                CBModifyInstance(_broker, ctxLocal, cur->SFCBIndEle, indele, NULL);
+
                 CMPIData sfcp=CMGetProperty(sub,"DeliveryFailureTime",NULL);
                 sfc=sfcp.value.uint64;
                 if (sfc == 0 ) {
@@ -555,23 +615,25 @@ void * retryExport (void * lctx)
                     sfc=tv.tv_sec;
                     cur=cur->next;
                     CMSetProperty(sub,"DeliveryFailureTime",&sfc,CMPI_uint64);
-                    CBModifyInstance(_broker, ctx, subop, sub, NULL);
+                    CBModifyInstance(_broker, ctxLocal, cur->sub, sub, NULL);
                 } else if (sfc+rtint < tv.tv_sec) {
                     // Exceeded subscription removal threshold, if action is:
                     // 2, delete the sub; 3, disable the sub; otherwise, nothing
                     if (ract == 2 ) {
-                        CBDeleteInstance(_broker, ctx, subop);
+                        _SFCB_TRACE(1,("--- Subscription threshold reached, deleting."));
+                        CBDeleteInstance(_broker, ctx, cur->sub);
                         purge=cur;
                         cur=cur->next;
-                        dqRetry(purge);
+                        dqRetry(ctx,purge);
                     } else if (ract == 3 ) {
                         //Set sub state to disable(4)
+                        _SFCB_TRACE(1,("--- Subscription threshold reached, disable."));
                         CMPIUint16 sst=4;
                         CMSetProperty(sub,"SubscriptionState",&sst,CMPI_uint16);
-                        CBModifyInstance(_broker, ctx, subop, sub, NULL);
+                        CBModifyInstance(_broker, ctx, cur->sub, sub, NULL);
                         purge=cur;
                         cur=cur->next;
-                        dqRetry(purge);
+                        dqRetry(ctx,purge);
                     }
                 } else {
                     cur=cur->next;
@@ -580,11 +642,63 @@ void * retryExport (void * lctx)
         }
     }
     // Queue went dry, cleanup and exit
+    _SFCB_TRACE(1,("--- Indication retry queue empty, thread exitting."));
     pthread_mutex_unlock(&RQlock);
     retryRunning=0;
-    return(NULL);
+    CMRelease(ctxLocal);
+    CMRelease(ctx);
+    _SFCB_RETURN(NULL); 
+}
+
+
+int refillRetryQ (const CMPIContext * ctx)
+{
+    _SFCB_ENTER(TRACE_INDPROVIDER, "refillRetryQ");  
+    int qfill=0;
+    if (RQhead==NULL) {
+        // The queue is empty, check if there are instances to be restored
+        CMPIObjectPath * op=CMNewObjectPath(_broker,"root/interop","SFCB_IndicationElement",NULL);
+        CMPIEnumeration * enm = _broker->bft->enumerateInstances(_broker, ctx, op, NULL, NULL);
+        while(enm && enm->ft->hasNext(enm, NULL)) {
+        // get the properties from the repo instance
+            CMPIData inst=CMGetNext(enm,NULL);
+            CMPIData indID=CMGetProperty(inst.value.inst,"indicationID",NULL);
+            CMPIData rcount=CMGetProperty(inst.value.inst,"retryCount",NULL);
+            CMPIData last=CMGetProperty(inst.value.inst,"lastDelivery",NULL);
+            CMPIData ind=CMGetProperty(inst.value.inst,"ind",NULL);
+            CMPIData sub=CMGetProperty(inst.value.inst,"sub",NULL);
+            CMPIData ld=CMGetProperty(inst.value.inst,"ld",NULL);
+            _SFCB_TRACE(1,("--- Requeueing indication id:%d",indID.value.Int));
+            // Rebuild the queue element
+            RTElement *element;
+            element = (RTElement *) malloc(sizeof(*element));
+            element->instanceID=indID.value.Int;
+            element->lasttry=last.value.Int;
+            element->count=rcount.value.Int;
+            element->ind=ind.value.ref->ft->clone(ind.value.ref,NULL);
+            element->ref=ld.value.ref->ft->clone(ld.value.ref,NULL);
+            element->sub=sub.value.ref->ft->clone(sub.value.ref,NULL);
+            CMPIObjectPath * indele=CMGetObjectPath(inst.value.inst,NULL);
+            element->SFCBIndEle=indele->ft->clone(indele,NULL);
+            // call enq
+            enqRetry(element,ctx,0);
+            qfill=1;
+        }
+        // spawn thread if we queued anything
+        if ((qfill == 1 ) && (retryRunning == 0)) {
+            retryRunning=1;
+            _SFCB_TRACE(1,("--- Starting retryExport thread"));
+            pthread_attr_init(&tattr);
+            pthread_attr_setdetachstate(&tattr, PTHREAD_CREATE_DETACHED);
+            CMPIContext * pctx = native_clone_CMPIContext(ctx);
+            pthread_create(&t, &tattr,&retryExport,(void *) pctx);
+        }
+    }
+
+    _SFCB_RETURN(0); 
 }
 
+
 CMPIStatus IndCIMXMLHandlerInvokeMethod(CMPIMethodMI * mi,
 					const CMPIContext * ctx,
 					const CMPIResult * rslt,
@@ -592,9 +706,11 @@ CMPIStatus IndCIMXMLHandlerInvokeMethod(
 					const char *methodName,
 					const CMPIArgs * in, CMPIArgs * out)
 { 
-   CMPIStatus st = { CMPI_RC_OK, NULL };
-   
    _SFCB_ENTER(TRACE_INDPROVIDER, "IndCIMXMLHandlerInvokeMethod");  
+   CMPIStatus st = { CMPI_RC_OK, NULL };
+   struct timeval tv;
+   struct timezone tz;
+   static unsigned int indID=1;
     
    if (interOpNameSpace(ref,&st)==0) _SFCB_RETURN(st);
    
@@ -607,30 +723,47 @@ CMPIStatus IndCIMXMLHandlerInvokeMethod(
         CMPIData isinst=CMGetNext(isenm,NULL);
         CMPIData mc=CMGetProperty(isinst.value.inst,"DeliveryRetryAttempts",NULL);
         if (mc.value.uint16 > 0) {
+            _SFCB_TRACE(1,("--- Indication delivery failed, adding to retry queue"));
             // Indication delivery failed, send to retry queue
             // build an element
             RTElement *element;
             element = (RTElement *) malloc(sizeof(*element));
-            element->ref=ref->ft->clone(ref,&st);
-            element->in=in->ft->clone(in,&st);
-            CMPIInstance *ind=CMGetArg(in,"subscription",NULL).value.inst;
-            element->sub=ind->ft->clone(ind,&st);
+            element->ref=ref->ft->clone(ref,NULL);
+            // Get the OP of the subscription
+            CMPIInstance *sub=CMGetArg(in,"subscription",NULL).value.inst;
+            CMPIObjectPath * subop=CMGetObjectPath(sub,NULL);
+            element->sub=subop->ft->clone(subop,NULL);
+            // Get the OP of the indication
+            CMPIInstance *ind=CMGetArg(in,"indication",NULL).value.inst;
+            CMPIObjectPath * iop=CMGetObjectPath(ind,NULL);
+            // Add the key value
+            CMAddKey(iop,"SFCB_IndicationID",&indID,CMPI_uint32);
+            CMSetProperty(ind,"SFCB_IndicationID",&indID,CMPI_uint32);
+            element->ind=iop->ft->clone(iop,NULL);
+            // Store other attrs
+            element->instanceID=indID;
+            element->count=0;
+            gettimeofday(&tv, &tz);
+            element->lasttry=tv.tv_sec;
+            CBCreateInstance(_broker, ctx, iop, ind, &st);
+            if (st.rc != 0) {
+                mlogf(M_ERROR,M_SHOW,"Pushing indication instance to repository failed, rc:%d\n",st.rc);
+            }
+            indID++;
             // Add it to the retry queue
-            enqRetry(element);
+            enqRetry(element,ctx,1);
             // And launch the thread if it isn't already running
-            pthread_t t;
-            pthread_attr_t tattr;
             pthread_attr_init(&tattr);
             pthread_attr_setdetachstate(&tattr, PTHREAD_CREATE_DETACHED);
             if (retryRunning == 0) {
+                retryRunning=1;
+                _SFCB_TRACE(1,("--- Starting retryExport thread"));
                 CMPIContext * pctx = native_clone_CMPIContext(ctx);
                 pthread_create(&t, &tattr,&retryExport,(void *) pctx);
-                retryRunning=1;
             }
         }
       }
    }
-   
    else {
       printf("--- ClassProvider: Invalid request %s\n", methodName);
       st.rc = CMPI_RC_ERR_METHOD_NOT_FOUND;
@@ -640,9 +773,6 @@ CMPIStatus IndCIMXMLHandlerInvokeMethod(
    _SFCB_RETURN(st);
 }
 
-
-
-
-CMInstanceMIStub(IndCIMXMLHandler, IndCIMXMLHandler, _broker, CMNoHook);
+CMInstanceMIStub(IndCIMXMLHandler, IndCIMXMLHandler, _broker, refillRetryQ(ctx) );
 CMMethodMIStub(IndCIMXMLHandler, IndCIMXMLHandler, _broker, CMNoHook);
 
Index: instance.c
===================================================================
RCS file: /cvsroot/sblim/sfcb/instance.c,v
retrieving revision 1.45
diff -u -p -r1.45 instance.c
--- instance.c	21 Nov 2008 20:23:51 -0000	1.45
+++ instance.c	27 May 2010 23:33:06 -0000
@@ -1,5 +1,5 @@
 /*
- * $Id$
+ * $Id$
  *
  * © Copyright IBM Corp. 2005, 2007
  *
@@ -184,9 +184,8 @@ CMPIData __ift_internal_getPropertyAt(co
       rv.value.string = 
 	 sfcb_native_new_CMPIString(rv.value.string->hdl, NULL,0);
    }  else if (rv.type == CMPI_ref) {
-      char *msg;
       rv.value.ref = getObjectPath(
-         (char*)ClObjectGetClString(&inst->hdr, (ClString*)&rv.value.chars), &msg);
+         (char*)ClObjectGetClString(&inst->hdr, (ClString*)&rv.value.chars), NULL);
    }
    else if (rv.type & CMPI_ARRAY && rv.value.array) {
       rv.value.array =
@@ -279,6 +278,22 @@ static CMPIStatus __ift_setProperty(cons
    CMReturn(CMPI_RC_OK);
 }
 
+CMPIStatus filterFlagProperty(CMPIInstance* ci, const char* id) {
+
+   CMPIStatus     st = { CMPI_RC_OK, 0 };
+   ClInstance     *inst = (ClInstance *) ci->hdl;
+   ClSection      *prps = &inst->properties;
+   int             i;
+
+   if ((i = ClObjectLocateProperty(&inst->hdr, prps, id)) != 0) {
+      ClInstanceFilterFlagProperty(inst, i-1);
+   }
+   else
+      st.rc = CMPI_RC_ERR_NOT_FOUND;
+
+   return st;
+}
+
 static CMPIStatus __ift_setObjectPath(CMPIInstance * inst,
                                       const CMPIObjectPath * cop)
 {
Index: instance.h
===================================================================
RCS file: /cvsroot/sblim/sfcb/instance.h,v
retrieving revision 1.2
diff -u -p -r1.2 instance.h
--- instance.h	6 Sep 2007 11:10:23 -0000	1.2
+++ instance.h	27 May 2010 23:33:06 -0000
@@ -24,5 +24,6 @@
 int instanceCompare(CMPIInstance *inst1, CMPIInstance *inst2);
 const char *instGetClassName(CMPIInstance * ci);
 const char *instGetNameSpace(CMPIInstance * ci);
+CMPIStatus      filterFlagProperty(CMPIInstance* ci, const char* id);
 
 #endif
Index: interopProvider.c
===================================================================
RCS file: /cvsroot/sblim/sfcb/interopProvider.c,v
retrieving revision 1.41
diff -u -p -r1.41 interopProvider.c
--- interopProvider.c	4 Feb 2010 18:58:34 -0000	1.41
+++ interopProvider.c	27 May 2010 23:33:06 -0000
@@ -36,6 +36,7 @@
 #include "native.h"
 #include "objectpath.h"
 #include <time.h>
+#include "instance.h"
 
 #define LOCALCLASSNAME "InteropProvider"
 
@@ -657,8 +658,8 @@ void initInterOp(
       }
       CMRelease(enm);
    } 
-   _SFCB_TRACE(1,("--- checking for sfcb_indicationsubscription"));
-   op=CMNewObjectPath(broker,"root/interop","sfcb_indicationsubscription",&st);
+   _SFCB_TRACE(1,("--- checking for cim_indicationsubscription"));
+   op=CMNewObjectPath(broker,"root/interop","cim_indicationsubscription",&st);
    ctxLocal = prepareUpcall((CMPIContext *)ctx);
    enm = _broker->bft->enumerateInstances(_broker, ctxLocal, op, NULL, &st);
    CMRelease(ctxLocal);
@@ -676,6 +677,26 @@ void initInterOp(
    _SFCB_EXIT(); 
 }
 
+/*
+ for CIM_IndicationSubscription we use the DeliveryFailureTime property to track
+ when indication delivery first failed.  However, this property is not a part of
+ the mof supplied by the DMTF, so we need to filter it out of instances being
+ returned to the client
+*/
+void
+filterInternalProps(CMPIInstance* ci)
+{
+
+  CMPIStatus      pst = { CMPI_RC_OK, NULL };
+  CMGetProperty(ci, "DeliveryFailureTime", &pst);
+  /* prop is set, need to clear it out */
+  if (pst.rc != CMPI_RC_ERR_NOT_FOUND) {
+    filterFlagProperty(ci, "DeliveryFailureTime");
+  }
+
+  return;
+}
+
 /* --------------------------------------------------------------------------*/
 /*                       Instance Provider Interface                         */
 /* --------------------------------------------------------------------------*/
@@ -733,9 +754,18 @@ CMPIStatus InteropProviderEnumInstances(
    enm = _broker->bft->enumerateInstances(_broker, ctxLocal, ref, properties, &st);
    CMRelease(ctxLocal);
                                       
-   while(enm && enm->ft->hasNext(enm, &st)) {
-       CMReturnInstance(rslt, (enm->ft->getNext(enm, &st)).value.inst);   
-   }   
+   while (enm && enm->ft->hasNext(enm, &st)) {
+
+     CMPIInstance* ci = (enm->ft->getNext(enm, &st)).value.inst;
+
+     /* need to check IndicationSubscription, since it may contain props used internally by sfcb */
+     CMPIObjectPath* cop = CMGetObjectPath(ci, &st);
+     if (strcasecmp(CMGetCharPtr(CMGetClassName(cop, NULL)), "cim_indicationsubscription") == 0) {
+       filterInternalProps(ci);
+     }
+
+     CMReturnInstance(rslt, ci);
+   }
    if(enm) CMRelease(enm);
    _SFCB_RETURN(st);
 }
@@ -759,6 +789,11 @@ CMPIStatus InteropProviderGetInstance(
 
    ci = _broker->bft->getInstance(_broker, ctxLocal, cop, properties, &st);
    if (st.rc==CMPI_RC_OK) {
+     /* need to check IndicationSubscription, since it may contain props used internally by sfcb */
+     if (strcasecmp(CMGetCharPtr(CMGetClassName(cop, NULL)), "cim_indicationsubscription") == 0) {
+       filterInternalProps(ci);
+     }
+
       CMReturnInstance(rslt, ci);
    }
    
@@ -796,13 +831,7 @@ CMPIStatus InteropProviderCreateInstance
    memLinkObjectPath(copLocal);
    
    if(isa(nss, cns, "cim_indicationsubscription")) {
-      _SFCB_TRACE(1,("--- create sfcb_indicationsubscription"));
-
-      if (strcasecmp(cns,"CIM_IndicationSubscription")==0) {
-        // Set the class name to our defined extension class
-        CMSetClassName(copLocal,"SFCB_IndicationSubscription");
-        CMSetObjectPath(ciLocal, copLocal);
-      }
+      _SFCB_TRACE(1,("--- create cim_indicationsubscription"));
 
       st=processSubscription(_broker,ctx,ciLocal,copLocal);
    }
Index: interopServerProvider.c
===================================================================
RCS file: /cvsroot/sblim/sfcb/interopServerProvider.c,v
retrieving revision 1.28
diff -u -p -r1.28 interopServerProvider.c
--- interopServerProvider.c	30 Dec 2009 22:41:29 -0000	1.28
+++ interopServerProvider.c	27 May 2010 23:33:06 -0000
@@ -753,9 +753,9 @@ void ServerProviderInitInstances(const C
   CMPIInstance * ci = NULL;
   CMPIContext * ctxLocal;
   CMPIBoolean filterCreation=1;
-  CMPIUint16 retryAttempts=0; /* only try to deliver indications once */
-  CMPIUint32 retryInterval=30;
-  CMPIUint16 subRemoval=3; /* 3 == "Disable" */
+  CMPIUint16 retryAttempts=3; /* retry indications 3 times */
+  CMPIUint32 retryInterval=20;/* at a 20 second interval */
+  CMPIUint16 subRemoval=2; /* 2 == "Remove" */
   CMPIUint32 subRemovalInterval=2592000; /* 30 days */
 
   ctxLocal = native_clone_CMPIContext(ctx);
@@ -782,6 +782,7 @@ void ServerProviderInitInstances(const C
   CMSetProperty(ci,"SubscriptionRemovalAction",&subRemoval,CMPI_uint16);
   CMSetProperty(ci,"SubscriptionRemovalTimeInterval",&subRemovalInterval,CMPI_uint32);
   CBCreateInstance(_broker, ctxLocal, op, ci, &st);
+  CMRelease(ctxLocal);
   return;
 }
 
Index: test/TestProviders/cmpiTestIndicationProvider.c
===================================================================
RCS file: /cvsroot/sblim/sfcb/test/TestProviders/cmpiTestIndicationProvider.c,v
retrieving revision 1.1
diff -u -p -r1.1 cmpiTestIndicationProvider.c
--- test/TestProviders/cmpiTestIndicationProvider.c	23 Oct 2009 14:04:01 -0000	1.1
+++ test/TestProviders/cmpiTestIndicationProvider.c	27 May 2010 23:33:06 -0000
@@ -31,7 +31,7 @@ generateIndication (const char *methodna
   if (enabled)
     {
       cop =
-        CMNewObjectPath (broker, "root/cimv2",
+        CMNewObjectPath (broker, "root/interop",
                          "Test_Indication", &rc);
       inst = CMNewInstance (broker, cop, &rc);
 
Index: test/TestProviders/tests/IndRetryTest.sh
===================================================================
RCS file: /cvsroot/sblim/sfcb/test/TestProviders/tests/IndRetryTest.sh,v
retrieving revision 1.1
diff -u -p -r1.1 IndRetryTest.sh
--- test/TestProviders/tests/IndRetryTest.sh	28 Jan 2010 23:56:06 -0000	1.1
+++ test/TestProviders/tests/IndRetryTest.sh	27 May 2010 23:33:06 -0000
@@ -69,9 +69,15 @@ sendInd () {
     # and 1 on failure. The failure of delivery here
     # is not necessarily a test failure depending on the
     # test case.
-    echo -n " initial ..."
-    # Invoke method to generate the indication
-    sendxml IndTest4CallMethod.xml /dev/null
+    if [ $1 = "single" ]
+    then
+        echo -n " initial ..."
+        # Invoke method to generate the indication
+        sendxml IndTest4CallMethod.xml /dev/null
+        sleep 5; # Wait due to deadlock prevention in localmode (indCIMXMLHandler.c)
+    else
+        sendxml IndTest4CallMethod.xml /dev/null
+    fi
     # Check if it was sent
     if [ -f $ODIR/SFCB_Listener.txt ]
     then
@@ -120,7 +126,7 @@ sendxml RIModIS.XML /dev/null
 
 # No odir, so initial should fail 
 odir clean
-sendInd 
+sendInd single
 if [ $? -eq 0 ] 
 then
     echo " FAILED"
@@ -155,7 +161,7 @@ sendxml RIModIS.XML /dev/null
 
 # No odir, so initial should fail 
 odir clean
-sendInd 
+sendInd single
 if [ $? -eq 0 ] 
 then
     echo " FAILED"
@@ -164,7 +170,7 @@ else
     # make odir, should retry and succeed
     echo -n " retry ..."
     odir make
-    sleep 4
+    sleep 10
     if [ -f $ODIR/SFCB_Listener.txt ]
     then
         echo " PASSED"
@@ -192,7 +198,7 @@ sendxml RIModIS.XML /dev/null
 
 # No odir, so initial should fail 
 odir clean
-sendInd 
+sendInd single
 if [ $? -eq 0 ] 
 then
     RC=1 
@@ -200,7 +206,7 @@ then
 else
     # Still no odir, so keeps failing, and should disable sub
     echo -n " disable ..."
-    sleep 5
+    sleep 10
     sendxml RIGetSub.XML ./RIGetSubDisable.result
     grep -A1 '"SubscriptionState"' ./RIGetSubDisable.result | grep '<VALUE>4</VALUE>' >/dev/null 2>&1
     if [ $? -eq 1 ] 
@@ -231,7 +237,7 @@ sendxml RIModIS.XML /dev/null
 
 # No odir, so initial should fail 
 odir clean
-sendInd 
+sendInd single
 if [ $? -eq 0 ] 
 then
     RC=1 
@@ -239,7 +245,7 @@ then
 else
     # Still no odir, so keeps failing, and should remove sub
     echo -n " remove ..."
-    sleep 5
+    sleep 10
     sendxml RIGetSub.XML ./RIGetSubRemove.result
     grep '<VALUE>' ./RIGetSubRemove.result >/dev/null 2>&1
     if [ $? -eq 0 ] 
@@ -252,7 +258,60 @@ else
     fi
 fi
 
+###
+# Flood
+###
 cleanup
-rm RIEnumIS.result
+init
+lim=1000
+echo -n  "  Indication flood: "
+./GenMI.pl 10 3 300 1
+if [ $? -ne 0 ] 
+then
+    echo " GenMI.pl FAILED"
+    exit 1; 
+fi
+sendxml RIModIS.XML /dev/null
+
+i=0
+j=0
+while [ $j -lt $lim ]
+do
+    sendInd flood
+    if [ $j -eq 100 ] # Let this many fail
+    then
+        odir make
+    fi
+    if [ $i -eq 50 ]
+    then 
+        echo -n "."
+        i=0
+    else
+        i=$((i+1))
+    fi
+    j=$((j+1))
+done
+sleep 20 # Let the retries catch up
+count=$(grep IndicationTime $ODIR/SFCB_Listener.txt  | wc -l)
+if [ $count -eq $lim ] 
+then
+    echo " $count of $lim: PASSED"
+else
+    echo " $count of $lim: FAILED"
+    RC=1
+fi
 
+###
+# Cleanup and exit
+###
+cleanup
+# Set Indication_Service back to the defaults
+./GenMI.pl 20 3 2592000 2
+if [ $? -ne 0 ] 
+then
+    echo " GenMI.pl FAILED"
+    exit 1; 
+fi
+sendxml RIModIS.XML /dev/null
+rm RIEnumIS.result
 exit $RC
Index: test/TestProviders/tests/IndTest3CreateSubscription.lines
===================================================================
RCS file: /cvsroot/sblim/sfcb/test/TestProviders/tests/IndTest3CreateSubscription.lines,v
retrieving revision 1.2
diff -u -p -r1.2 IndTest3CreateSubscription.lines
--- test/TestProviders/tests/IndTest3CreateSubscription.lines	8 Dec 2009 00:40:50 -0000	1.2
+++ test/TestProviders/tests/IndTest3CreateSubscription.lines	27 May 2010 23:33:06 -0000
@@ -1,4 +1,4 @@
-<INSTANCENAME CLASSNAME="SFCB_IndicationSubscription">
+<INSTANCENAME CLASSNAME="CIM_IndicationSubscription">
 <KEYBINDING NAME="Filter">
 <VALUE.REFERENCE>
 <LOCALINSTANCEPATH>
Index: test/TestProviders/tests/IndTest3CreateSubscription.xml
===================================================================
RCS file: /cvsroot/sblim/sfcb/test/TestProviders/tests/IndTest3CreateSubscription.xml,v
retrieving revision 1.2
diff -u -p -r1.2 IndTest3CreateSubscription.xml
--- test/TestProviders/tests/IndTest3CreateSubscription.xml	8 Dec 2009 00:40:50 -0000	1.2
+++ test/TestProviders/tests/IndTest3CreateSubscription.xml	27 May 2010 23:33:06 -0000
@@ -8,7 +8,7 @@
           <NAMESPACE NAME="interop"/>
         </LOCALNAMESPACEPATH>
         <IPARAMVALUE NAME="NewInstance">
-          <INSTANCE CLASSNAME="SFCB_IndicationSubscription">
+          <INSTANCE CLASSNAME="CIM_IndicationSubscription">
             <PROPERTY.REFERENCE NAME="Filter" 
                                 REFERENCECLASS="CIM_IndicationFilter"> 
               <VALUE.REFERENCE> 
Index: test/TestProviders/tests/IndTest5DeleteSubscription.xml
===================================================================
RCS file: /cvsroot/sblim/sfcb/test/TestProviders/tests/IndTest5DeleteSubscription.xml,v
retrieving revision 1.2
diff -u -p -r1.2 IndTest5DeleteSubscription.xml
--- test/TestProviders/tests/IndTest5DeleteSubscription.xml	8 Dec 2009 00:40:50 -0000	1.2
+++ test/TestProviders/tests/IndTest5DeleteSubscription.xml	27 May 2010 23:33:06 -0000
@@ -8,7 +8,7 @@
           <NAMESPACE NAME="interop"/>
         </LOCALNAMESPACEPATH>
         <IPARAMVALUE NAME="InstanceName">
-          <INSTANCENAME CLASSNAME="SFCB_IndicationSubscription">
+          <INSTANCENAME CLASSNAME="CIM_IndicationSubscription">
             <KEYBINDING NAME="Filter">
               <VALUE.REFERENCE>
                 <INSTANCENAME CLASSNAME="CIM_IndicationFilter">
Index: test/xmltest/Indication03CreateSubscription.OK
===================================================================
RCS file: /cvsroot/sblim/sfcb/test/xmltest/Indication03CreateSubscription.OK,v
retrieving revision 1.2
diff -u -p -r1.2 Indication03CreateSubscription.OK
--- test/xmltest/Indication03CreateSubscription.OK	8 Dec 2009 00:40:50 -0000	1.2
+++ test/xmltest/Indication03CreateSubscription.OK	27 May 2010 23:33:06 -0000
@@ -4,7 +4,7 @@
 <SIMPLERSP>
 <IMETHODRESPONSE NAME="CreateInstance">
 <IRETURNVALUE>
-<INSTANCENAME CLASSNAME="SFCB_IndicationSubscription">
+<INSTANCENAME CLASSNAME="CIM_IndicationSubscription">
 <KEYBINDING NAME="Filter">
 <VALUE.REFERENCE>
 <LOCALINSTANCEPATH>
Index: test/xmltest/Indication11DeleteSubscription.xml
===================================================================
RCS file: /cvsroot/sblim/sfcb/test/xmltest/Indication11DeleteSubscription.xml,v
retrieving revision 1.2
diff -u -p -r1.2 Indication11DeleteSubscription.xml
--- test/xmltest/Indication11DeleteSubscription.xml	8 Dec 2009 00:40:50 -0000	1.2
+++ test/xmltest/Indication11DeleteSubscription.xml	27 May 2010 23:33:06 -0000
@@ -8,7 +8,7 @@
           <NAMESPACE NAME="interop"/>
         </LOCALNAMESPACEPATH>
         <IPARAMVALUE NAME="InstanceName">
-          <INSTANCENAME CLASSNAME="SFCB_IndicationSubscription">
+          <INSTANCENAME CLASSNAME="CIM_IndicationSubscription">
             <KEYBINDING NAME="Filter">
               <VALUE.REFERENCE>
                 <INSTANCENAME CLASSNAME="CIM_IndicationFilter">
