// ===================================================================
// Title:	Class Definitions for CMPI Workshop Excersize	
// Filename:	CWS_Excercise.mof
// Date:	02/03/2003
// Author:	Viktor Mihajlovski <mihajlov@de.ibm.com>
// ===================================================================
// Copyrigth (c) 2003 IBM Corporation
//
// THIS FILE IS PROVIDED UNDER THE TERMS OF THE COMMON PUBLIC LICENSE 
// ("AGREEMENT"). ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS FILE 
// CONSTITUTES RECIPIENTS ACCEPTANCE OF THE AGREEMENT.
//
// You can obtain a current copy of the Common Public License from
// http://oss.software.ibm.com/developerworks/opensource/license-cpl.html
// 
// DISCLAIMER: 	Do not use in Production Environments.
//
// Note: 	For convenience we repeat the properties that are
//       	expected to be filled in by a provider.This is 
//	 	normally not required. The property sections are 
//	 	copied from the System27_FileElements.mof
//		contained in CIM Schema 2.7 provided by the
//		Distributed Management Task Force, Inc. (DMTF).
//
// ===================================================================

// ===================================================================
// PlainFile
// ===================================================================
[ Description("Class representing plain files. We are not inheriting "
              "from UnixFile in order to avoid unnecessary " 
	      "complexities with FileIdentity") 
]
class CWS_PlainFile : CIM_DataFile
{
    [Propagated ("CIM_FileSystem.CSCreationClassName"), 
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's CreationClassName.") ]
    string CSCreationClassName;
    
    [Propagated ("CIM_FileSystem.CSName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's Name.") ]
    string CSName;
    
    [Propagated ("CIM_FileSystem.CreationClassName"), 
        Key, MaxLen (256),
        Description ("The scoping FileSystem's CreationClassName.") ]
    string FSCreationClassName;
    
    [Propagated ("CIM_FileSystem.Name"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's Name.") ]
    string FSName;
    
    [Key, MaxLen (256),
        Description (
        "CreationClassName indicates the name of the class or the "
        "subclass used in the creation of an instance. When used "
        "with the other key properties of this class, this property "
        "allows all instances of this class and its subclasses to "
        "be uniquely identified.") ]
    string CreationClassName;    
    
    [Override ("Name"), Key, MaxLen (1024),
       Description (
       "The inherited Name serves as part of the key of a LogicalFile "
       "instance within a FileSystem. A unique identifier (such as a "
       "full path name) is required as a Name value.  Since Files are "
       "weak to their FileSystem (and not to a Directory which would "
       "provide a more granular naming algorithm), care must be "
       "taken to make LogicalFile's Name unique for a given Creation"
       "ClassName and FileSystem. A full path name is one way "
       "to do this.") ]

    string Name;
    [Gauge, Description ("Size of the File in bytes."),
        Units ("Bytes") ]
    uint64 FileSize;
    
    [Description (
        "File's creation date.") ] 
    datetime CreationDate;
    
    [Description (
        "Time that the File was last modified.") ] 
    datetime LastModified;
    
    [Description (
        "Time that the File was last accessed.") ] 
    datetime LastAccessed;
    
    [Description (
        "Boolean indicating that the File can be read.") ] 
    boolean Readable;
    
    [Description (
        "Boolean indicating that the File can be written.") ]
    boolean Writeable;
    
    [Description (
        "Indicates the file is executable.") ] 
    boolean Executable;
	
    [Description (
 	"this method returns the file's type.") ]
    string fileType();  
};

// ===================================================================
// Directory
// ===================================================================
[ Description("Class representing directories. We are not inheriting "
              "from UnixDirectory in order to keep things simple.") 
]
class CWS_Directory : CIM_Directory
{
    [Propagated ("CIM_FileSystem.CSCreationClassName"), 
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's CreationClassName.") ]
    string CSCreationClassName;
    
    [Propagated ("CIM_FileSystem.CSName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's Name.") ]
    string CSName;
    
    [Propagated ("CIM_FileSystem.CreationClassName"), 
        Key, MaxLen (256),
        Description ("The scoping FileSystem's CreationClassName.") ]
    string FSCreationClassName;
    
    [Propagated ("CIM_FileSystem.Name"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's Name.") ]
    string FSName;
    
    [Key, MaxLen (256),
        Description (
        "CreationClassName indicates the name of the class or the "
        "subclass used in the creation of an instance. When used "
        "with the other key properties of this class, this property "
        "allows all instances of this class and its subclasses to "
        "be uniquely identified.") ]
    string CreationClassName;    
    
    [Override ("Name"), Key, MaxLen (1024),
       Description (
       "The inherited Name serves as part of the key of a LogicalFile "
       "instance within a FileSystem. A unique identifier (such as a "
       "full path name) is required as a Name value.  Since Files are "
       "weak to their FileSystem (and not to a Directory which would "
       "provide a more granular naming algorithm), care must be "
       "taken to make LogicalFile's Name unique for a given Creation"
       "ClassName and FileSystem. A full path name is one way "
       "to do this.") ]
    string Name;

    [Gauge, Description ("Size of the File in bytes."),
        Units ("Bytes") ]
    uint64 FileSize;
    
    [Description (
        "File's creation date.") ] 
    datetime CreationDate;
    
    [Description (
        "Time that the File was last modified.") ] 
    datetime LastModified;
    
    [Description (
        "Time that the File was last accessed.") ] 
    datetime LastAccessed;
    
    [Description (
        "Boolean indicating that the File can be read.") ] 
    boolean Readable;
    
    [Description (
        "Boolean indicating that the File can be written.") ]
    boolean Writeable;
    
    [Description (
        "Indicates the file is executable.") ] 
    boolean Executable;
};

// ===================================================================
// PlainFile
// ===================================================================
[ Association, Aggregation, 
  Description("Link between Directories and their contents, which "
              "can be plain files or other directories."),
  Provider("cmpi:CWS_DirectoryContainsFile")
]
class CWS_DirectoryContainsFile : CIM_DirectoryContainsFile
{
    [Override ("GroupComponent"), Aggregate, Max (1),
        Description ("The Directory.") ]
    CWS_Directory REF GroupComponent;
    
    [Override ("PartComponent"),
        Description (
            "The LogicalFile 'contained within' the Directory.") ]
    CIM_LogicalFile REF PartComponent;
};