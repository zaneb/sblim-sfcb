#!/bin/bash

# cvs_sfcb usage

if [ "$1" == "" ] ;then
   echo "USAGE: cvs_sfcb co [sfcb_config options]..."
   echo " "
   echo " co  -  Indicates check-out the code from CVS tree"
   echo " sfcb_config options --   enable-ssl , --enable-slp --enable-ipv6 ...."
   echo " "
   echo "Examples:"
   echo "     cvs_sfcb co  --- this command check-out the code from cvs tree and build sfcb with default options "
   echo "     cvs_sfcb co  enable-ssl -- this command check-out the code from cvs tree and build sfcb with enabled"
   echo "                                  ssl option"
   echo "     cvs_sfcb enable-ipv6 enable-ssl -- this command build sfcb with enabled ssl and ipv6 options" 
   echo " "
   exit 1
fi

REPOSITORY_DIR="/usr/local/var/lib/sfcb/registration/repository"
SFCB_ROOT="/opt/Nightlybuild"
dirName="sfcbBuild"
BASE_DIR="$SFCB_ROOT/$dirName"

SBLIM_ROOT="/opt/SBLIM"

# Remove sfcb if already exist

if [ -d $BASE_DIR ]
then
   cd ${BASE_DIR}/sfcb
   make uninstall
   cd $SFCB_ROOT
   rm -rf $dirName
   rm -rf $REPOSITORY_DIR
fi

 if [ ! -d $dirName ]
 then
    mkdir -p $BASE_DIR
    cd $BASE_DIR
 fi

# Status files
DATE=`date -u +%y%m%d`
CVS_CO_OUT=cvsco_out
AUTO_CONFISCATE=auto_confiscate
MAKE_OUT=make_out
MAIL_FILE=mail_file
TEST_OUT=test_out
ZIP_FILE=report.zip
REPORT_FILE=report$DATE.txt

configOptions=""
testOptions=""
TEST_OUT=test_out
distro=""
status="FAILURE"
distro_id=`lsb_release -i| awk {'print $3'}`
if [ $distro_id == "RedHatEnterpriseAS" ]
then
    distro="RHEL4U6"
else
    distro="SLES10"
fi



echo "Platform: LINUX_GNU" >> ${BASE_DIR}/${REPORT_FILE}
echo "Date  : $DATE" >> ${BASE_DIR}/${REPORT_FILE}


MAIL_ID=""  #mailing list

export  PATH=$BASE_DIR/sfcb:/usr/local/bin:/usr/local/etc/init.d:$PATH
export  LD_LIBRARY_PATH=/usr/local/lib:/usr/local/lib/sfcb:$BASE_DIR/sfcb/.libs:$LD_LIBRARY_PATH

# Mail the report

function MAIL_TO()
{
     /usr/local/etc/init.d/sfcb  stop #Stop SFCB server
     zip -j ${BASE_DIR}/${ZIP_FILE} ${BASE_DIR}/${MAKE_OUT}
     zip -j ${BASE_DIR}/${ZIP_FILE} ${BASE_DIR}/sfcb/test/xmltest/*.result
     tail -30 $1 >> ${BASE_DIR}/${MAIL_FILE}
     mail -s "$distro : $status : SFCB NightlyBuild" $MAIL_ID < ${BASE_DIR}/${REPORT_FILE}
     mutt -a  ${BASE_DIR}/${ZIP_FILE} -s "$distro : $status : SFCB NightlyBuild" $MAIL_IDS < ${BASE_DIR}/${MAIL_FILE}
     exit 1
}

# Starting code check out from CVS source

 function CVS_CHECK_OUT()
 {
    export CVSROOT=:pserver:anonymous:@sblim.cvs.sourceforge.net/cvsroot/sblim
    cvs login

    cvs co sfcb 1>$BASE_DIR/$CVS_CO_OUT 2>&1
    cd sfcb
    cvs co mofc 1>$BASE_DIR/$CVS_CO_OUT 2>&1
 }
# SFCB tests

function SFCB_TESTS()
{
     echo "Starting Unit tests ........." >> $MAKE_OUT
     if make check 1>>$BASE_DIR/$MAKE_OUT 2>&1
     then
        tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
        status="SUCCESS"
     else
	tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
        status="FAILURE"
        MAIL_TO ${BASE_DIR}/${MAKE_OUT}
        break
     fi
}


if [ -n $1 ] ; then
   for confVariable in $*
   do
       case $confVariable in
           "co"|"CO" ) 
                         CVS_CHECK_OUT
                         ;;
                   * ) 
                          if [ -z "$configOptions" ] ; then
                              configOptions="--$confVariable=yes"
                          else
                              configOptions="$configOptions   --$confVariable=yes"
                          fi
                          if [ "$confVariable" == "enable-ipv6" ]
                          then
                              testOptions=ipv6;
                          fi
			  if [ "$confVariable" == "enable-tests" ]
 			  then
			      configOptions="$configOptions   --$confVariable"
			  fi
                          ;;
       esac
   done
fi

# Setup auto conf files by runing autoconfiscate.sh file. 

if [ -d mofc ] 
then
   if sh ./autoconfiscate.sh 1> $BASE_DIR/$AUTO_CONFISCATE 2>&1
   then
       tail -30 $BASE_DIR/$AUTO_CONFISCATE >> ${BASE_DIR}/${REPORT_FILE}
       status="SUCCESS"
    else
        MAIL_TO $BASE_DIR/$AUTO_CONFIGURE
    fi 
fi

# Configuring build options and starting SFCB Build 

if  sh ./configure  $configOptions 1>> $BASE_DIR/$MAKE_OUT 2>&1
then

    echo " " >> ${BASE_DIR}/${MAKE_OUT}
    echo "Starting Build " >> ${BASE_DIR}/${MAKE_OUT}
    echo " " >> ${BASE_DIR}/${MAKE_OUT}
    tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}

    if  make  1>>${BASE_DIR}/${MAKE_OUT} 2>&1
    then
        tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
        if make install 1>>${BASE_DIR}/${MAKE_OUT} 2>&1
        then
	    tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
            if make postinstall 1>>${BASE_DIR}/${MAKE_OUT} 2>&1
            then 
		tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
                status="SUCCESS"
            else
		tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
                status="FAILURE"
                MAIL_TO ${BASE_DIR}/${MAKE_OUT}
            fi
        else
	    tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
            status="FAILURE"
            MAIL_TO ${BASE_DIR}/${MAKE_OUT}
        fi
    else
	tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
        status="FAILURE"
        MAIL_TO ${BASE_DIR}/${MAKE_OUT}
    fi
else
      tail -30 $BASE_DIR/${MAKE_OUT} >> ${BASE_DIR}/${REPORT_FILE}
      status="FAILURE"
      MAIL_TO ${BASE_DIR}/${MAKE_OUT}
fi

# End of the SFCB Build

# Starting tests

/usr/local/etc/init.d/sfcb  start 1>>${BASE_DIR}/${MAKE_OUT} 2>&1 #Start SFCB server

SFCB_TESTS

/usr/local/etc/init.d/sfcb  stop 1>>${BASE_DIR}/${MAKE_OUT} 2>&1 #Stop SFCB server

MAIL_TO ${BASE_DIR}/${MAKE_OUT}
